import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from "@angular/core";

@Component({
    selector: 'app-child',
    template: `–î–æ—á–µ—Ä–Ω–∏–π: {{ data }}`,
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class ChildComponent {
    @Input() data!: string;
}


@Component({
    selector: 'app-parent',
    imports: [
        ChildComponent
    ],
    template: `
    <p>–†–æ–¥–∏—Ç–µ–ª—å: {{ parentText }}</p>
    <button (click)="update()">–û–±–Ω–æ–≤–∏—Ç—å</button>
    <app-child [data]="childText"></app-child>
  `,
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class ParentComponent {
    parentText = '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å';
    childText = '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫';

    constructor(private cd: ChangeDetectorRef) {}

    update() {
        this.parentText = '–ù–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å';
        this.childText = '–ù–æ–≤—ã–π —Ä–µ–±—ë–Ω–æ–∫';
        this.cd.detectChanges(); // üî• —Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π –º–æ–º–µ–Ω—Ç
    }
}

@Component({
    selector: 'app-grand',
    template: `
      <p>–î–µ–¥: {{ grandText }}</p>
      <app-parent></app-parent>
    `,
    imports: [
        ParentComponent
    ],
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class GrandParentComponent {
    grandText = '–î–µ–¥–æ–≤—Å–∫–∏–π —Ç–µ–∫—Å—Ç';
}
